leveneTest(Roughness ~ id, data=rough)
t.test(cyclic$Roughness, acyclic$Roughness)
# R script to analyse roughness statistics from Python
# Load in the data
rough <- read.csv("cyclicroughness_in5.csv")
# Check how it looks
head(rough)
cyclic <- subset(rough, rough$id == "cyclic")
acyclic <- subset(rough, rough$id == "acyclic")
plot(density(cyclic$Roughness))
plot(density(acyclic$Roughness))
# Triple check with a statistical test
shapiro.test(cyclic$Roughness)
# Yields p = 0.38 so normally distributed
shapiro.test(acyclic$Roughness)
rough_no_neg <- subset(rough, rough$id != "Negative Control")
head(rough_no_neg)
# Now try another levene's test
leveneTest(Roughness ~ id, data=rough)
t.test(cyclic$Roughness, acyclic$Roughness)
# R script to analyse roughness statistics from Python
# Load in the data
rough <- read.csv("cyclicroughness_in6.csv")
# Check how it looks
head(rough)
cyclic <- subset(rough, rough$id == "cyclic")
acyclic <- subset(rough, rough$id == "acyclic")
plot(density(cyclic$Roughness))
plot(density(acyclic$Roughness))
# Triple check with a statistical test
shapiro.test(cyclic$Roughness)
# Yields p = 0.38 so normally distributed
shapiro.test(acyclic$Roughness)
rough_no_neg <- subset(rough, rough$id != "Negative Control")
head(rough_no_neg)
# Now try another levene's test
leveneTest(Roughness ~ id, data=rough)
t.test(cyclic$Roughness, acyclic$Roughness)
# R script to analyse roughness statistics from Python
# Load in the data
rough <- read.csv("cyclicroughness_in7.csv")
# Check how it looks
head(rough)
cyclic <- subset(rough, rough$id == "cyclic")
acyclic <- subset(rough, rough$id == "acyclic")
plot(density(cyclic$Roughness))
plot(density(acyclic$Roughness))
# Triple check with a statistical test
shapiro.test(cyclic$Roughness)
# Yields p = 0.38 so normally distributed
shapiro.test(acyclic$Roughness)
rough_no_neg <- subset(rough, rough$id != "Negative Control")
head(rough_no_neg)
# Now try another levene's test
leveneTest(Roughness ~ id, data=rough)
t.test(cyclic$Roughness, acyclic$Roughness)
# R script to analyse roughness statistics from Python
# Load in the data
rough <- read.csv("cyclicroughness_in8.csv")
# Check how it looks
head(rough)
cyclic <- subset(rough, rough$id == "cyclic")
acyclic <- subset(rough, rough$id == "acyclic")
plot(density(cyclic$Roughness))
plot(density(acyclic$Roughness))
# Triple check with a statistical test
shapiro.test(cyclic$Roughness)
# Yields p = 0.38 so normally distributed
shapiro.test(acyclic$Roughness)
rough_no_neg <- subset(rough, rough$id != "Negative Control")
head(rough_no_neg)
# Now try another levene's test
leveneTest(Roughness ~ id, data=rough)
t.test(cyclic$Roughness, acyclic$Roughness)
# R script to analyse roughness statistics from Python
# Load in the data
rough <- read.csv("cyclicroughness_in9.csv")
# Check how it looks
head(rough)
cyclic <- subset(rough, rough$id == "cyclic")
acyclic <- subset(rough, rough$id == "acyclic")
plot(density(cyclic$Roughness))
plot(density(acyclic$Roughness))
# Triple check with a statistical test
shapiro.test(cyclic$Roughness)
# Yields p = 0.38 so normally distributed
shapiro.test(acyclic$Roughness)
rough_no_neg <- subset(rough, rough$id != "Negative Control")
head(rough_no_neg)
# Now try another levene's test
leveneTest(Roughness ~ id, data=rough)
t.test(cyclic$Roughness, acyclic$Roughness)
# R script to analyse roughness statistics from Python
# Load in the data
rough <- read.csv("generoughness_in0.csv")
# Check how it looks
head(rough)
hidden_nodes <- subset(rough, rough$id == "hidden nodes")
observed_nodes <- subset(rough, rough$id == "observed nodes")
plot(density(hidden_nodes$Roughness))
plot(density(observed_nodes$Roughness))
# Triple check with a statistical test
shapiro.test(hidden_nodes$Roughness)
# Yields p = 0.38 so normally distributed
shapiro.test(observed_nodes$Roughness)
# rough_no_neg <- subset(rough, rough$id != "Negative Control")
# head(rough_no_neg)
# Now try another levene's test
leveneTest(Roughness ~ id, data=rough)
library(car)
# rough_no_neg <- subset(rough, rough$id != "Negative Control")
# head(rough_no_neg)
# Now try another levene's test
leveneTest(Roughness ~ id, data=rough)
t.test(hidden_nodes$Roughness, observed_nodes$Roughness)
# R script to analyse roughness statistics from Python
# Load in the data
rough <- read.csv("generoughness_in1.csv")
# Check how it looks
head(rough)
hidden_nodes <- subset(rough, rough$id == "hidden nodes")
observed_nodes <- subset(rough, rough$id == "observed nodes")
plot(density(hidden_nodes$Roughness))
plot(density(observed_nodes$Roughness))
# Triple check with a statistical test
shapiro.test(hidden_nodes$Roughness)
# Yields p = 0.38 so normally distributed
shapiro.test(observed_nodes$Roughness)
# rough_no_neg <- subset(rough, rough$id != "Negative Control")
# head(rough_no_neg)
# Now try another levene's test
leveneTest(Roughness ~ id, data=rough)
t.test(hidden_nodes$Roughness, observed_nodes$Roughness)
# R script to analyse roughness statistics from Python
# Load in the data
rough <- read.csv("generoughness_in2.csv")
# Check how it looks
head(rough)
hidden_nodes <- subset(rough, rough$id == "hidden nodes")
observed_nodes <- subset(rough, rough$id == "observed nodes")
plot(density(hidden_nodes$Roughness))
plot(density(observed_nodes$Roughness))
# Triple check with a statistical test
shapiro.test(hidden_nodes$Roughness)
# Yields p = 0.38 so normally distributed
shapiro.test(observed_nodes$Roughness)
# rough_no_neg <- subset(rough, rough$id != "Negative Control")
# head(rough_no_neg)
# Now try another levene's test
leveneTest(Roughness ~ id, data=rough)
t.test(hidden_nodes$Roughness, observed_nodes$Roughness)
# R script to analyse roughness statistics from Python
# Load in the data
rough <- read.csv("generoughness_in3.csv")
# Check how it looks
head(rough)
hidden_nodes <- subset(rough, rough$id == "hidden nodes")
observed_nodes <- subset(rough, rough$id == "observed nodes")
plot(density(hidden_nodes$Roughness))
plot(density(observed_nodes$Roughness))
# Triple check with a statistical test
shapiro.test(hidden_nodes$Roughness)
# Yields p = 0.38 so normally distributed
shapiro.test(observed_nodes$Roughness)
# rough_no_neg <- subset(rough, rough$id != "Negative Control")
# head(rough_no_neg)
# Now try another levene's test
leveneTest(Roughness ~ id, data=rough)
t.test(hidden_nodes$Roughness, observed_nodes$Roughness)
# R script to analyse roughness statistics from Python
# Load in the data
rough <- read.csv("generoughness_in4.csv")
# Check how it looks
head(rough)
hidden_nodes <- subset(rough, rough$id == "hidden nodes")
observed_nodes <- subset(rough, rough$id == "observed nodes")
plot(density(hidden_nodes$Roughness))
plot(density(observed_nodes$Roughness))
# Triple check with a statistical test
shapiro.test(hidden_nodes$Roughness)
# Yields p = 0.38 so normally distributed
shapiro.test(observed_nodes$Roughness)
# rough_no_neg <- subset(rough, rough$id != "Negative Control")
# head(rough_no_neg)
# Now try another levene's test
leveneTest(Roughness ~ id, data=rough)
t.test(hidden_nodes$Roughness, observed_nodes$Roughness)
# R script to analyse roughness statistics from Python
# Load in the data
rough <- read.csv("generoughness_in5.csv")
# Check how it looks
head(rough)
hidden_nodes <- subset(rough, rough$id == "hidden nodes")
observed_nodes <- subset(rough, rough$id == "observed nodes")
plot(density(hidden_nodes$Roughness))
plot(density(observed_nodes$Roughness))
# Triple check with a statistical test
shapiro.test(hidden_nodes$Roughness)
# Yields p = 0.38 so normally distributed
shapiro.test(observed_nodes$Roughness)
# rough_no_neg <- subset(rough, rough$id != "Negative Control")
# head(rough_no_neg)
# Now try another levene's test
leveneTest(Roughness ~ id, data=rough)
t.test(hidden_nodes$Roughness, observed_nodes$Roughness)
# R script to analyse roughness statistics from Python
# Load in the data
rough <- read.csv("generoughness_in6.csv")
# Check how it looks
head(rough)
hidden_nodes <- subset(rough, rough$id == "hidden nodes")
observed_nodes <- subset(rough, rough$id == "observed nodes")
plot(density(hidden_nodes$Roughness))
plot(density(observed_nodes$Roughness))
# Triple check with a statistical test
shapiro.test(hidden_nodes$Roughness)
# Yields p = 0.38 so normally distributed
shapiro.test(observed_nodes$Roughness)
# rough_no_neg <- subset(rough, rough$id != "Negative Control")
# head(rough_no_neg)
# Now try another levene's test
leveneTest(Roughness ~ id, data=rough)
t.test(hidden_nodes$Roughness, observed_nodes$Roughness)
# R script to analyse roughness statistics from Python
# Load in the data
rough <- read.csv("generoughness_in7.csv")
# Check how it looks
head(rough)
hidden_nodes <- subset(rough, rough$id == "hidden nodes")
observed_nodes <- subset(rough, rough$id == "observed nodes")
plot(density(hidden_nodes$Roughness))
plot(density(observed_nodes$Roughness))
# Triple check with a statistical test
shapiro.test(hidden_nodes$Roughness)
# Yields p = 0.38 so normally distributed
shapiro.test(observed_nodes$Roughness)
# rough_no_neg <- subset(rough, rough$id != "Negative Control")
# head(rough_no_neg)
# Now try another levene's test
leveneTest(Roughness ~ id, data=rough)
t.test(hidden_nodes$Roughness, observed_nodes$Roughness)
# R script to analyse roughness statistics from Python
# Load in the data
rough <- read.csv("generoughness_in8.csv")
# Check how it looks
head(rough)
hidden_nodes <- subset(rough, rough$id == "hidden nodes")
observed_nodes <- subset(rough, rough$id == "observed nodes")
plot(density(hidden_nodes$Roughness))
plot(density(observed_nodes$Roughness))
# Triple check with a statistical test
shapiro.test(hidden_nodes$Roughness)
# Yields p = 0.38 so normally distributed
shapiro.test(observed_nodes$Roughness)
# rough_no_neg <- subset(rough, rough$id != "Negative Control")
# head(rough_no_neg)
# Now try another levene's test
leveneTest(Roughness ~ id, data=rough)
t.test(hidden_nodes$Roughness, observed_nodes$Roughness)
# R script to analyse roughness statistics from Python
# Load in the data
rough <- read.csv("generoughness_in9.csv")
# Check how it looks
head(rough)
hidden_nodes <- subset(rough, rough$id == "hidden nodes")
observed_nodes <- subset(rough, rough$id == "observed nodes")
plot(density(hidden_nodes$Roughness))
plot(density(observed_nodes$Roughness))
# Triple check with a statistical test
shapiro.test(hidden_nodes$Roughness)
# Yields p = 0.38 so normally distributed
shapiro.test(observed_nodes$Roughness)
# rough_no_neg <- subset(rough, rough$id != "Negative Control")
# head(rough_no_neg)
# Now try another levene's test
leveneTest(Roughness ~ id, data=rough)
t.test(hidden_nodes$Roughness, observed_nodes$Roughness)
# R script to analyse roughness statistics from Python
# Load in the data
rough <- read.csv("generoughness.csv")
# Check how it looks
head(rough)
hidden_nodes <- subset(rough, rough$id == "hidden nodes")
observed_nodes <- subset(rough, rough$id == "observed nodes")
plot(density(hidden_nodes$Roughness))
plot(density(observed_nodes$Roughness))
# Triple check with a statistical test
shapiro.test(hidden_nodes$Roughness)
# Yields p = 0.38 so normally distributed
shapiro.test(observed_nodes$Roughness)
# rough_no_neg <- subset(rough, rough$id != "Negative Control")
# head(rough_no_neg)
# Now try another levene's test
leveneTest(Roughness ~ id, data=rough)
t.test(hidden_nodes$Roughness, observed_nodes$Roughness)
ggplot(Roughness ~ id, data=rough)
plot(Roughness ~ id, data=rough)
wilcox.test(Roughness ~ id, data=rough)
p <- ggplot(rough, aes(x=id, y=Roughness)) +
geom_boxplot()
library(ggplot2)
p <- ggplot(rough, aes(x=id, y=Roughness)) +
geom_boxplot()
p
# Now plot the data for dissertation
p <- ggplot(rough, aes(x=id, y=Roughness)) +
geom_boxplot()
# Now plot the data for dissertation
p <- ggplot(rough, aes(x=id, y=Roughness, color=id)) +
geom_boxplot()
p
# Now plot the data for dissertation
p <- ggplot(rough, aes(x=id, y=Roughness, fill=id)) +
geom_boxplot()
p
p + ggtitle("Roughness of BNI Search Space ")
p + ggtitle("Effect of Silencing Nodes on BNI Search Space")
p + ggtitle("Effect of Node Silencing on BNI Search Space")
# R script to analyse roughness statistics from Python
# Load in the data
rough <- read.csv("roughness_extinction_total.csv")
# Check how it looks
head(rough)
library(car)
library(ggpubr)
library(ggplot2)
sample <- subset(rough, rough$id == "Sample")
pos <- subset(rough, rough$id == "Positive Control")
neg <- subset(rough, rough$id == "Negative Control")
head(sample)
# cyclic <- subset(rough, rough$id == "cyclic")
# acyclic <- subset(rough, rough$id == "acyclic")
#
# hidden_nodes <- subset(rough, rough$id == "hidden nodes")
# observed_nodes <- subset(rough, rough$id == "observed nodes")
plot(density(sample$Roughness))
plot(density(pos$Roughness))
plot(density(neg$Roughness))
# Triple check with a statistical test
shapiro.test(sample$Roughness)
# Yields p = 0.38 so normally distributed
shapiro.test(pos$Roughness)
# Yields p = 0.59 so normally distributed
shapiro.test(neg$Roughness)
rough_no_neg <- subset(rough, rough$id != "Negative Control")
head(rough_no_neg)
# Now try another levene's test
leveneTest(Roughness ~ id, data=rough)
t.test(hidden_nodes$Roughness, observed_nodes$Roughness)
wilcox.test(Roughness ~ id, data=rough)
wilcox.test(Roughness ~ id, data=rough_no_neg)
# Now plot the data for dissertation
p <- ggplot(rough, aes(x=id, y=Roughness, fill=id)) +
geom_boxplot()
p + ggtitle("Effect of Node Silencing on BNI Search Space")
p + ggtitle("Effect of Extinction on BNI Search Space")
# Now between sample and neg, and between pos and neg
rough_no_pos <- subset(rough, rough$id != "Positive Control")
wilcox.test(Roughness ~ id, data=rough_no_pos)
rough_no_sample <- subset(rough, rough$id != 'Sample')
wilcox.test(Roughness ~ id, data=rough_no_sample)
# Now plot the data for dissertation
p <- ggplot(rough, aes(x=id, y=Roughness, fill=id)) +
geom_boxplot() +
xlab("Dataset Type")+
ylab("Search Space Roughness")
# Now plot the data for dissertation
p <- ggplot(rough, aes(x=id, y=Roughness, fill=id)) +
geom_boxplot() +
xlab("Dataset Type")+
ylab("Search Space Roughness")
p + ggtitle("Effect of Extinction on BNI Search Space")
# R script to analyse roughness statistics from Python
# Load in the data
rough <- read.csv("cyclicroughness_total.csv")
# Check how it looks
head(rough)
cyclic <- subset(rough, rough$id == "cyclic")
acyclic <- subset(rough, rough$id == "acyclic")
plot(density(cyclic$Roughness))
plot(density(acyclic$Roughness))
# Triple check with a statistical test
shapiro.test(cyclic$Roughness)
# Yields p = 0.38 so normally distributed
shapiro.test(acyclic$Roughness)
# rough_no_neg <- subset(rough, rough$id != "Negative Control")
# head(rough_no_neg)
# Now try another levene's test
leveneTest(Roughness ~ id, data=rough)
t.test(cyclic$Roughness, acyclic$Roughness)
wilcox.test(Roughness ~ id, data=rough)
# Now plot the data for dissertation
p <- ggplot(rough, aes(x=id, y=Roughness, fill=id)) +
geom_boxplot() +
xlab("Dataset Type")+
ylab("Search Space Roughness")
p + ggtitle("Effect of Extinction on BNI Search Space")
p + ggtitle("Effect of Cyclicity on static BNI Search Space")
library(car)
library(ggplot2)
# R script to analyse roughness statistics from Python
# Load in the data
rough <- read.csv("cyclicroughnessL5_total.csv")
# Check how it looks
head(rough)
cyclic <- subset(rough, rough$id == "cyclic")
acyclic <- subset(rough, rough$id == "acyclic")
plot(density(cyclic$Roughness))
plot(density(acyclic$Roughness))
# Triple check with a statistical test
shapiro.test(cyclic$Roughness)
# Yields p = 0.38 so normally distributed
shapiro.test(acyclic$Roughness)
# rough_no_neg <- subset(rough, rough$id != "Negative Control")
# head(rough_no_neg)
# Now try another levene's test
leveneTest(Roughness ~ id, data=rough)
t.test(cyclic$Roughness, acyclic$Roughness)
wilcox.test(Roughness ~ id, data=rough)
# Now plot the data for dissertation
p <- ggplot(rough, aes(x=id, y=Roughness, fill=id)) +
geom_boxplot() +
xlab("Dataset Type")+
ylab("Search Space Roughness")
p + ggtitle("Effect of Cyclicity on static BNI Search Space")
p + ggtitle("Effect of Cyclicity on static BNI Search Space (L=5)")
# R script to analyse roughness statistics from Python
# Load in the data
rough <- read.csv("cyclicroughness_total.csv")
# Check how it looks
head(rough)
cyclic <- subset(rough, rough$id == "cyclic")
acyclic <- subset(rough, rough$id == "acyclic")
plot(density(cyclic$Roughness))
plot(density(acyclic$Roughness))
# Triple check with a statistical test
shapiro.test(cyclic$Roughness)
# Yields p = 0.38 so normally distributed
shapiro.test(acyclic$Roughness)
# rough_no_neg <- subset(rough, rough$id != "Negative Control")
# head(rough_no_neg)
# Now try another levene's test
leveneTest(Roughness ~ id, data=rough)
t.test(cyclic$Roughness, acyclic$Roughness)
wilcox.test(Roughness ~ id, data=rough)
# Now plot the data for dissertation
p <- ggplot(rough, aes(x=id, y=Roughness, fill=id)) +
geom_boxplot() +
xlab("Dataset Type")+
ylab("Search Space Roughness")
p + ggtitle("Effect of Cyclicity on static BNI Search Space (L=5)")
# R script to analyse roughness statistics from Python
# Load in the data
rough <- read.csv("cyclicroughness_total.csv")
# Check how it looks
head(rough)
cyclic <- subset(rough, rough$id == "cyclic")
acyclic <- subset(rough, rough$id == "acyclic")
head(cyclic)
# Now plot the data for dissertation
p <- ggplot(rough, aes(x=id, y=Roughness, fill=id)) +
geom_boxplot() +
xlab("Dataset Type")+
ylab("Search Space Roughness")
p + ggtitle("Effect of Linkage on static BNI Search Space")
# R script to analyse roughness statistics from Python
# Load in the data
rough <- read.csv("cyclicroughness_total.csv")
# Check how it looks
head(rough)
# Now plot the data for dissertation
p <- ggplot(rough, aes(x=id, y=Roughness, fill=id)) +
geom_boxplot() +
xlab("Dataset Type")+
ylab("Search Space Roughness")
p + ggtitle("Effect of Linkage on static BNI Search Space")
cyclic_L5 <- subset(rough, rough$id == "(L=5) cyclic")
cyclic_L15 <- subset(rough, rough$id == "(L=15) cyclic")
# R script to analyse roughness statistics from Python
# Load in the data
rough <- read.csv("cyclicroughness_total.csv")
# Check how it looks
head(rough)
head(cyclic_L15)
L5 <- subset(rough, rough$Links == 5)
L15 <- subset(rough, rough$Links == 15)
cyclic_L5 <- subset(L5, L5$id == "cyclic")
cyclic_L15 <- subset(L15, L15$id == "cyclic")
# R script to analyse roughness statistics from Python
# Load in the data
rough <- read.csv("cyclicroughness_total.csv")
# Check how it looks
head(rough)
L5 <- subset(rough, rough$Links == 5)
L15 <- subset(rough, rough$Links == 15)
cyclic_L5 <- subset(L5, L5$id == "cyclic")
cyclic_L15 <- subset(L15, L15$id == "cyclic")
head(L15)
cyclic_L5 <- subset(L5, L5$id == "cyclic")
cyclic_L15 <- subset(L15, L15$id == "cyclic")
head(L5)
head(cyclic_L15)
head(cyclic_L5)
cyclic_L5 <- subset(L5, L5$id == "cyclic")
head(cyclic_L5)
kruskal.test(Roughness ~ id, data=rough)
# R script to analyse roughness statistics from Python
# Load in the data
rough <- read.csv("cyclicroughness_total.csv")
# Check how it looks
head(rough)
kruskal.test(Roughness ~ id, data=rough)
