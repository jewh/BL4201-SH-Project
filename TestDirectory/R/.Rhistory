rna45 <- subset(rna, Temperature==45)
bm30<-betareg(conc~ï..time,data=rna30)
bm37<-betareg(conc~ï..time,data=rna37)
bm45<-betareg(conc~ï..time,data=rna45)
# predict for 45
grid <- seq(min(rna45$ï..time), max(rna45$ï..time), length = 100)
predb30 <- predict(bm30, newdata = data.frame(ï..time = grid))
predb37 <- predict(bm37, newdata = data.frame(ï..time = grid))
predb45 <- predict(bm45, newdata = data.frame(ï..time = grid))
est30 <- quantile(predb30, probs = c(0.025, 0.975))
est37 <- quantile(predb37, probs = c(0.025, 0.975))
est45 <- quantile(predb45, probs = c(0.025, 0.975))
plot(rna37$ï..time, rna37$conc, pch = 20, col="darkgreen",
main="RNA Production over time",
xlab="Time (mins)",
ylab="RNA Concentration (M)",
legend("topleft",
c("30C","37C","45C"),
fill=c("blue","darkgreen","red"))
points(rna30$ï..time, rna30$conc, pch = 20, col="blue")
points(rna45$ï..time, rna45$conc, pch = 20, col="red")
#for model 30
lines(grid, predb30, lwd = 1.5)
lines(grid, predb30, lwd = 1.5, col = "blue")
lines(grid, predb30-est30[1]*predb30, lty = "dotted", lwd = 1.5, col = "blue")
lines(grid, predb30+est30[2]*predb30, lty = "dotted", lwd = 1.5, col = "blue")
#for model 37
lines(grid, predb37, lwd = 1.5)
lines(grid, predb37, lwd = 1.5, col = "darkgreen")
lines(grid, predb37-est37[1]*predb37, lty = "dotted", lwd = 1.5, col = "darkgreen")
lines(grid, predb37+est37[2]*predb37, lty = "dotted", lwd = 1.5, col = "darkgreen")
#for model 45
lines(grid, predb45, lwd = 1.5)
lines(grid, predb45, lwd = 1.5, col = "red")
lines(grid, predb45-est45[1]*predb45, lty = "dotted", lwd = 1.5, col = "red")
lines(grid, predb45+est45[2]*predb45, lty = "dotted", lwd = 1.5, col = "red")
plot(rna37$ï..time, rna37$conc, pch = 20, col="darkgreen",
main="RNA Production over time",
xlab="Time (mins)",
ylab="RNA Concentration (M)",
legend("topleft",
c("30C","37C","45C"),
fill=c("blue","darkgreen","red")))
points(rna30$ï..time, rna30$conc, pch = 20, col="blue")
points(rna45$ï..time, rna45$conc, pch = 20, col="red")
#for model 30
lines(grid, predb30, lwd = 1.5)
lines(grid, predb30, lwd = 1.5, col = "blue")
lines(grid, predb30-est30[1]*predb30, lty = "dotted", lwd = 1.5, col = "blue")
lines(grid, predb30+est30[2]*predb30, lty = "dotted", lwd = 1.5, col = "blue")
#for model 37
lines(grid, predb37, lwd = 1.5)
lines(grid, predb37, lwd = 1.5, col = "darkgreen")
lines(grid, predb37-est37[1]*predb37, lty = "dotted", lwd = 1.5, col = "darkgreen")
lines(grid, predb37+est37[2]*predb37, lty = "dotted", lwd = 1.5, col = "darkgreen")
#for model 45
lines(grid, predb45, lwd = 1.5)
lines(grid, predb45, lwd = 1.5, col = "red")
lines(grid, predb45-est45[1]*predb45, lty = "dotted", lwd = 1.5, col = "red")
lines(grid, predb45+est45[2]*predb45, lty = "dotted", lwd = 1.5, col = "red")
plot(rna37$ï..time, rna37$conc, pch = 20, col="darkgreen",
main="RNA Production over time",
xlab="Time (mins)",
ylab="RNA Concentration (M)",
legend("topleft",
c("30C","37C","45C"),
fill=c("blue","darkgreen","red")))
plot(rna37$ï..time, rna37$conc, pch = 20, col="darkgreen",
main="RNA Production over time",
xlab="Time (mins)",
ylab="RNA Concentration (M)",
legend("topleft",
c("30C","37C","45C"),
fill=c("blue","darkgreen","red")))
points(rna30$ï..time, rna30$conc, pch = 20, col="blue")
points(rna45$ï..time, rna45$conc, pch = 20, col="red")
plot(rna37$ï..time, rna37$conc, pch = 20, col="darkgreen",
main="RNA Production over time",
xlab="Time (mins)",
ylab="RNA Concentration (M)"
)
legend("topleft",
c("30C","37C","45C"),
fill=c("blue","darkgreen","red"))
lines(grid, predb30, lwd = 1.5)
lines(grid, predb30, lwd = 1.5, col = "blue")
lines(grid, predb30-est30[1]*predb30, lty = "dotted", lwd = 1.5, col = "blue")
lines(grid, predb30+est30[2]*predb30, lty = "dotted", lwd = 1.5, col = "blue")
#for model 37
lines(grid, predb37, lwd = 1.5)
lines(grid, predb37, lwd = 1.5, col = "darkgreen")
lines(grid, predb37-est37[1]*predb37, lty = "dotted", lwd = 1.5, col = "darkgreen")
lines(grid, predb37+est37[2]*predb37, lty = "dotted", lwd = 1.5, col = "darkgreen")
#for model 45
lines(grid, predb45, lwd = 1.5)
lines(grid, predb45, lwd = 1.5, col = "red")
lines(grid, predb45-est45[1]*predb45, lty = "dotted", lwd = 1.5, col = "red")
lines(grid, predb45+est45[2]*predb45, lty = "dotted", lwd = 1.5, col = "red")
points(rna30$ï..time, rna30$conc, pch = 20, col="blue")
points(rna30$ï..time, rna30$conc, pch = 20, col="blue")
points(rna45$ï..time, rna45$conc, pch = 20, col="red")
plot(rna37$ï..time, rna37$conc, pch = 20, col="darkgreen",
main="RNA Production over time",
xlab="Time (mins)",
ylab="RNA Concentration (M)"
)
points(rna30$ï..time, rna30$conc, pch = 20, col="blue")
points(rna45$ï..time, rna45$conc, pch = 20, col="red")
#for model 30
lines(grid, predb30, lwd = 1.5)
lines(grid, predb30, lwd = 1.5, col = "blue")
#lines(grid, predb30-est30[1]*predb30, lty = "dotted", lwd = 1.5, col = "blue")
#lines(grid, predb30+est30[2]*predb30, lty = "dotted", lwd = 1.5, col = "blue")
#for model 37
lines(grid, predb37, lwd = 1.5)
lines(grid, predb37, lwd = 1.5, col = "darkgreen")
#lines(grid, predb37-est37[1]*predb37, lty = "dotted", lwd = 1.5, col = "darkgreen")
#lines(grid, predb37+est37[2]*predb37, lty = "dotted", lwd = 1.5, col = "darkgreen")
#for model 45
lines(grid, predb45, lwd = 1.5)
lines(grid, predb45, lwd = 1.5, col = "red")
#lines(grid, predb45-est45[1]*predb45, lty = "dotted", lwd = 1.5, col = "red")
#lines(grid, predb45+est45[2]*predb45, lty = "dotted", lwd = 1.5, col = "red")
legend("topleft",
c("30C","37C","45C"),
fill=c("blue","darkgreen","red"))
summary(bm40)
library(betareg)
rna <- read.csv("file:///C:/Users/user/Documents/iGEM/2019/Data/RNA mol.csv")
head(rna)
#Set 1M as max conc to normalise between (0,1)
rna$conc <- as.numeric(rna$conc/1000.0)
head(rna)
#Set all 0 values to 0.00001
rna$conc[1] <- 0.00001
rna$conc[6] <- 0.00001
rna$conc[11] <- 0.00001
rna$conc[16] <- 0.00001
rna$conc[21] <- 0.00001
rna$conc[26] <- 0.00001
rna$conc[31] <- 0.00001
rna$conc[36] <- 0.00001
rna$conc[41] <- 0.00001
#Subset data into temperatures
rna30 <- subset(rna, Temperature==30)
rna37 <- subset(rna, Temperature==37)
rna45 <- subset(rna, Temperature==45)
bm30<-betareg(conc~ï..time,data=rna30)
bm37<-betareg(conc~ï..time,data=rna37)
bm45<-betareg(conc~ï..time,data=rna45)
summary(bm30)
summary(bm37)
summary(bm40)
# predict for 45
grid <- seq(min(rna45$ï..time), max(rna45$ï..time), length = 100)
predb30 <- predict(bm30, newdata = data.frame(ï..time = grid))
predb37 <- predict(bm37, newdata = data.frame(ï..time = grid))
predb45 <- predict(bm45, newdata = data.frame(ï..time = grid))
est30 <- quantile(predb30, probs = c(0.025, 0.975))
est37 <- quantile(predb37, probs = c(0.025, 0.975))
est45 <- quantile(predb45, probs = c(0.025, 0.975))
plot(rna37$ï..time, rna37$conc, pch = 20, col="darkgreen",
main="RNA Production over time",
xlab="Time (mins)",
ylab="RNA Concentration (M)"
)
points(rna30$ï..time, rna30$conc, pch = 20, col="blue")
points(rna45$ï..time, rna45$conc, pch = 20, col="red")
#for model 30
lines(grid, predb30, lwd = 1.5)
lines(grid, predb30, lwd = 1.5, col = "blue")
#lines(grid, predb30-est30[1]*predb30, lty = "dotted", lwd = 1.5, col = "blue")
#lines(grid, predb30+est30[2]*predb30, lty = "dotted", lwd = 1.5, col = "blue")
#for model 37
lines(grid, predb37, lwd = 1.5)
lines(grid, predb37, lwd = 1.5, col = "darkgreen")
#lines(grid, predb37-est37[1]*predb37, lty = "dotted", lwd = 1.5, col = "darkgreen")
#lines(grid, predb37+est37[2]*predb37, lty = "dotted", lwd = 1.5, col = "darkgreen")
#for model 45
lines(grid, predb45, lwd = 1.5)
lines(grid, predb45, lwd = 1.5, col = "red")
#lines(grid, predb45-est45[1]*predb45, lty = "dotted", lwd = 1.5, col = "red")
#lines(grid, predb45+est45[2]*predb45, lty = "dotted", lwd = 1.5, col = "red")
legend("topleft",
c("30C","37C","45C"),
fill=c("blue","darkgreen","red"))
ks.test(rna30$conc,"beta")
ks.test(rna30$conc,beta)
install.packages(sgnesR)
install.packages(igraph)
install.packages("igraph")
install.packages("sgnesR")
head(data)
head(rough)
rough <- read.csv("C:\Users\User\Documents\GitHub\
BL4201-SH-Project\extinction_network_roughness.csv")
rough <- read.csv("C:\Users\User\Documents\GitHub\BL4201-SH-Project\extinction_network_roughness.csv")
library(car)
library(ggplot2)
# R script to analyse roughness statistics from Python
# Load in the data
rough <- read.csv("roughness_in0.csv")
# Check how it looks
head(rough)
# Check variance equal using Levene's test:
leveneTest(Roughness ~ id, data=rough)
# R script to analyse roughness statistics from Python
# Load in the data
rough <- read.csv("roughness_in0.csv")
setwd("~/GitHub/BL4201-SH-Project/TestDirectory/R")
# R script to analyse roughness statistics from Python
# Load in the data
rough <- read.csv("roughness_in0.csv")
# Check how it looks
head(rough)
# Check variance equal using Levene's test:
leveneTest(Roughness ~ id, data=rough)
qqnorm(rough$Roughness)
qqline(rough$Roughness)
# This suggests that the data is NOT normally distributed
# Double check with a density plot
ggdensity(rough$Roughness)
library(ggpubr)
install.packages("ggpubr")
# This suggests that the data is NOT normally distributed
# Double check with a density plot
ggdensity(rough$Roughness)
# This suggests that the data is NOT normally distributed
# Double check with a density plot
plot(density(rough$Roughness))
pos <- rough$id == "Positive Control"
# This suggests that the data is NOT normally distributed
# Double check with a density plot for each dataset
sample <- rough$id == "Sample"
neg <- rough$id == "Negative Control"
plot(density(sample$Roughness))
plot(density(sample))
head(sample)
# This suggests that the data is NOT normally distributed
# Double check with a density plot for each dataset
sample <- subset(rough, rough$id == "Sample")
head(sample)
bottom(sample)
pos <- subset(rough, rough$id == "Positive Control")
neg <- subset(rough, rough$id == "Negative Control")
plot(density(sample))
plot(density(sample$Roughness))
plot(density(neg$Roughness))
plot(density(pos$Roughness))
plot(density(sample$Roughness))
# Triple check with a statistical test
shapiro.test(sample$Roughness)
# Yields p = 0.38 so normally distributed
shaprio.test(pos$Roughness)
# Yields p = 0.38 so normally distributed
shapiro.test(pos$Roughness)
# Yields p = 0.59 so normally distributed
shapiro.test(neg$Roughness)
data_no_neg <- subset(data, data$id != "Negative Control")
# Now try another levene's test
leveneTest(Roughness ~ id, data=data_no_neg)
head(data_no_neg)
u
rough_no_neg <- subset(rough, rough$id != "Negative Control")
head(rough_no_neg)
# Now try another levene's test
leveneTest(Roughness ~ id, data=rough_no_neg)
t.test(sample$Roughness, pos$Roughness)
# R script to analyse roughness statistics from Python
# Load in the data
rough <- read.csv("roughness_in1.csv")
# Check how it looks
head(rough)
# Check variance equal using Levene's test:
leveneTest(Roughness ~ id, data=rough)
qqnorm(rough$Roughness)
qqline(rough$Roughness)
# This suggests that the data is NOT normally distributed
# Because you didn't subset the data!
# Double check with a density plot for each dataset
sample <- subset(rough, rough$id == "Sample")
pos <- subset(rough, rough$id == "Positive Control")
neg <- subset(rough, rough$id == "Negative Control")
head(sample)
plot(density(sample$Roughness))
plot(density(pos$Roughness))
plot(density(neg$Roughness))
# Triple check with a statistical test
shapiro.test(sample$Roughness)
# Yields p = 0.38 so normally distributed
shapiro.test(pos$Roughness)
# Yields p = 0.59 so normally distributed
shapiro.test(neg$Roughness)
rough_no_neg <- subset(rough, rough$id != "Negative Control")
head(rough_no_neg)
# Now try another levene's test
leveneTest(Roughness ~ id, data=rough_no_neg)
t.test(sample$Roughness, pos$Roughness)
# R script to analyse roughness statistics from Python
# Load in the data
rough <- read.csv("roughness_in2.csv")
# Check how it looks
head(rough)
# Examine density plot for each dataset
sample <- subset(rough, rough$id == "Sample")
pos <- subset(rough, rough$id == "Positive Control")
neg <- subset(rough, rough$id == "Negative Control")
head(sample)
plot(density(sample$Roughness))
plot(density(pos$Roughness))
plot(density(neg$Roughness))
# Triple check with a statistical test
shapiro.test(sample$Roughness)
# Yields p = 0.38 so normally distributed
shapiro.test(pos$Roughness)
# Yields p = 0.59 so normally distributed
shapiro.test(neg$Roughness)
rough_no_neg <- subset(rough, rough$id != "Negative Control")
head(rough_no_neg)
# Now try another levene's test
leveneTest(Roughness ~ id, data=rough_no_neg)
# R script to analyse roughness statistics from Python
# Load in the data
rough <- read.csv("roughness_in3.csv")
# Check how it looks
head(rough)
# Examine density plot for each dataset
sample <- subset(rough, rough$id == "Sample")
pos <- subset(rough, rough$id == "Positive Control")
neg <- subset(rough, rough$id == "Negative Control")
head(sample)
plot(density(sample$Roughness))
plot(density(pos$Roughness))
plot(density(neg$Roughness))
# Triple check with a statistical test
shapiro.test(sample$Roughness)
# Yields p = 0.38 so normally distributed
shapiro.test(pos$Roughness)
# Yields p = 0.59 so normally distributed
shapiro.test(neg$Roughness)
rough_no_neg <- subset(rough, rough$id != "Negative Control")
head(rough_no_neg)
# Now try another levene's test
leveneTest(Roughness ~ id, data=rough_no_neg)
t.test(sample$Roughness, pos$Roughness)
# R script to analyse roughness statistics from Python
# Load in the data
rough <- read.csv("roughness_in4.csv")
# Check how it looks
head(rough)
# Examine density plot for each dataset
sample <- subset(rough, rough$id == "Sample")
pos <- subset(rough, rough$id == "Positive Control")
neg <- subset(rough, rough$id == "Negative Control")
head(sample)
plot(density(sample$Roughness))
plot(density(pos$Roughness))
plot(density(neg$Roughness))
# Triple check with a statistical test
shapiro.test(sample$Roughness)
# Yields p = 0.38 so normally distributed
shapiro.test(pos$Roughness)
# Yields p = 0.59 so normally distributed
shapiro.test(neg$Roughness)
rough_no_neg <- subset(rough, rough$id != "Negative Control")
head(rough_no_neg)
# Now try another levene's test
leveneTest(Roughness ~ id, data=rough_no_neg)
t.test(sample$Roughness, pos$Roughness)
# R script to analyse roughness statistics from Python
# Load in the data
rough <- read.csv("roughness_in5.csv")
# Check how it looks
head(rough)
# Examine density plot for each dataset
sample <- subset(rough, rough$id == "Sample")
pos <- subset(rough, rough$id == "Positive Control")
neg <- subset(rough, rough$id == "Negative Control")
head(sample)
plot(density(sample$Roughness))
plot(density(pos$Roughness))
plot(density(neg$Roughness))
# Triple check with a statistical test
shapiro.test(sample$Roughness)
# Yields p = 0.38 so normally distributed
shapiro.test(pos$Roughness)
# Yields p = 0.59 so normally distributed
shapiro.test(neg$Roughness)
rough_no_neg <- subset(rough, rough$id != "Negative Control")
head(rough_no_neg)
# Now try another levene's test
leveneTest(Roughness ~ id, data=rough_no_neg)
t.test(sample$Roughness, pos$Roughness)
# R script to analyse roughness statistics from Python
# Load in the data
rough <- read.csv("roughness_in6.csv")
# Check how it looks
head(rough)
# Examine density plot for each dataset
sample <- subset(rough, rough$id == "Sample")
pos <- subset(rough, rough$id == "Positive Control")
neg <- subset(rough, rough$id == "Negative Control")
head(sample)
plot(density(sample$Roughness))
plot(density(pos$Roughness))
plot(density(neg$Roughness))
# Triple check with a statistical test
shapiro.test(sample$Roughness)
# Yields p = 0.38 so normally distributed
shapiro.test(pos$Roughness)
# Yields p = 0.59 so normally distributed
shapiro.test(neg$Roughness)
rough_no_neg <- subset(rough, rough$id != "Negative Control")
head(rough_no_neg)
# Now try another levene's test
leveneTest(Roughness ~ id, data=rough_no_neg)
t.test(sample$Roughness, pos$Roughness)
# R script to analyse roughness statistics from Python
# Load in the data
rough <- read.csv("roughness_in7.csv")
# Check how it looks
head(rough)
# Examine density plot for each dataset
sample <- subset(rough, rough$id == "Sample")
pos <- subset(rough, rough$id == "Positive Control")
neg <- subset(rough, rough$id == "Negative Control")
head(sample)
plot(density(sample$Roughness))
plot(density(pos$Roughness))
plot(density(neg$Roughness))
# Triple check with a statistical test
shapiro.test(sample$Roughness)
# Yields p = 0.38 so normally distributed
shapiro.test(pos$Roughness)
# Yields p = 0.59 so normally distributed
shapiro.test(neg$Roughness)
rough_no_neg <- subset(rough, rough$id != "Negative Control")
head(rough_no_neg)
# Now try another levene's test
leveneTest(Roughness ~ id, data=rough_no_neg)
t.test(sample$Roughness, pos$Roughness)
# R script to analyse roughness statistics from Python
# Load in the data
rough <- read.csv("roughness_in8.csv")
# Check how it looks
head(rough)
# Examine density plot for each dataset
sample <- subset(rough, rough$id == "Sample")
pos <- subset(rough, rough$id == "Positive Control")
neg <- subset(rough, rough$id == "Negative Control")
head(sample)
plot(density(sample$Roughness))
plot(density(pos$Roughness))
plot(density(neg$Roughness))
# Triple check with a statistical test
shapiro.test(sample$Roughness)
# Yields p = 0.38 so normally distributed
shapiro.test(pos$Roughness)
# Yields p = 0.59 so normally distributed
shapiro.test(neg$Roughness)
rough_no_neg <- subset(rough, rough$id != "Negative Control")
head(rough_no_neg)
# Now try another levene's test
leveneTest(Roughness ~ id, data=rough_no_neg)
# R script to analyse roughness statistics from Python
# Load in the data
rough <- read.csv("roughness_in9.csv")
# Check how it looks
head(rough)
# Examine density plot for each dataset
sample <- subset(rough, rough$id == "Sample")
pos <- subset(rough, rough$id == "Positive Control")
neg <- subset(rough, rough$id == "Negative Control")
head(sample)
plot(density(sample$Roughness))
plot(density(pos$Roughness))
plot(density(neg$Roughness))
# Triple check with a statistical test
shapiro.test(sample$Roughness)
# Yields p = 0.38 so normally distributed
shapiro.test(pos$Roughness)
# Yields p = 0.59 so normally distributed
shapiro.test(neg$Roughness)
rough_no_neg <- subset(rough, rough$id != "Negative Control")
head(rough_no_neg)
# Now try another levene's test
leveneTest(Roughness ~ id, data=rough_no_neg)
t.test(sample$Roughness, pos$Roughness)
# R script to analyse roughness statistics from Python
# Load in the data
rough <- read.csv("roughness_in0.csv")
# Check how it looks
head(rough)
# Examine density plot for each dataset
sample <- subset(rough, rough$id == "Sample")
pos <- subset(rough, rough$id == "Positive Control")
neg <- subset(rough, rough$id == "Negative Control")
head(sample)
plot(density(sample$Roughness))
plot(density(pos$Roughness))
plot(density(neg$Roughness))
# Triple check with a statistical test
shapiro.test(sample$Roughness)
# Yields p = 0.38 so normally distributed
shapiro.test(pos$Roughness)
# Yields p = 0.59 so normally distributed
shapiro.test(neg$Roughness)
rough_no_neg <- subset(rough, rough$id != "Negative Control")
head(rough_no_neg)
# Now try another levene's test
leveneTest(Roughness ~ id, data=rough_no_neg)
t.test(sample$Roughness, pos$Roughness)
