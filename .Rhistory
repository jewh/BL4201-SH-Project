bm30<-betareg(conc~ï..time,data=rna30)
bm37<-betareg(conc~ï..time,data=rna37)
bm45<-betareg(conc~ï..time,data=rna45)
summary(bm30)
summary(bm37)
summary(bm40)
# predict for 45
grid <- seq(min(rna45$ï..time), max(rna45$ï..time), length = 100)
predb30 <- predict(bm30, newdata = data.frame(ï..time = grid))
predb37 <- predict(bm37, newdata = data.frame(ï..time = grid))
predb45 <- predict(bm45, newdata = data.frame(ï..time = grid))
est30 <- quantile(predb30, probs = c(0.025, 0.975))
est37 <- quantile(predb37, probs = c(0.025, 0.975))
est45 <- quantile(predb45, probs = c(0.025, 0.975))
plot(rna37$ï..time, rna37$conc, pch = 20, col="darkgreen",
main="RNA Production over time",
xlab="Time (mins)",
ylab="RNA Concentration (M)"
)
points(rna30$ï..time, rna30$conc, pch = 20, col="blue")
points(rna45$ï..time, rna45$conc, pch = 20, col="red")
#for model 30
lines(grid, predb30, lwd = 1.5)
lines(grid, predb30, lwd = 1.5, col = "blue")
#lines(grid, predb30-est30[1]*predb30, lty = "dotted", lwd = 1.5, col = "blue")
#lines(grid, predb30+est30[2]*predb30, lty = "dotted", lwd = 1.5, col = "blue")
#for model 37
lines(grid, predb37, lwd = 1.5)
lines(grid, predb37, lwd = 1.5, col = "darkgreen")
#lines(grid, predb37-est37[1]*predb37, lty = "dotted", lwd = 1.5, col = "darkgreen")
#lines(grid, predb37+est37[2]*predb37, lty = "dotted", lwd = 1.5, col = "darkgreen")
#for model 45
lines(grid, predb45, lwd = 1.5)
lines(grid, predb45, lwd = 1.5, col = "red")
#lines(grid, predb45-est45[1]*predb45, lty = "dotted", lwd = 1.5, col = "red")
#lines(grid, predb45+est45[2]*predb45, lty = "dotted", lwd = 1.5, col = "red")
legend("topleft",
c("30C","37C","45C"),
fill=c("blue","darkgreen","red"))
ks.test(rna30$conc,"beta")
ks.test(rna30$conc,beta)
install.packages(sgnesR)
install.packages(igraph)
install.packages("igraph")
install.packages("sgnesR")
head(data)
head(rough)
rough <- read.csv("C:\Users\User\Documents\GitHub\
BL4201-SH-Project\extinction_network_roughness.csv")
rough <- read.csv("C:\Users\User\Documents\GitHub\BL4201-SH-Project\extinction_network_roughness.csv")
library(sgnesR)
library(sgnesR)
install_github(shaileshtripathi/sgnesR)
library(githubinstall)
source('~/GitHub/BL4201-SH-Project/Sgnes.R')
install.packages("githubinstall")
githubinstall(sgnesR)
library(githubinstall)
githubinstall(sgnesR)
source('~/GitHub/BL4201-SH-Project/Sgnes.R')
library(devtools)
githubinstall(sgnesR)
githubinstall(shaileshtripathi/sgnesR)
githubinstall("shaileshtripathi/sgnesR")
library(devtools)
githubinstall("shaileshtripathi/sgnesR")
githubinstall("shaileshtripathi/sgnesR")
githubinstall("shaileshtripathi/sgnesR")
githubinstall("shaileshtripathi/sgnesR")
githubinstall("sgnesR")
version
library(ggplot2)
library(ggpubr)
setwd("~/GitHub/BL4201-SH-Project/TestDirectory/R")
# need data for the extinction/noise experiment,
# milns policy experiment and dynamic experiment
exnoise <- read.csv("extinction_noise.csv", fileEncoding = 'UTF-8-BOM')
milns <- read.csv("extinction_discretisation.csv", fileEncoding = 'UTF-8-BOM')
dynamic <- read.csv("dynamicextinctionroughness_total.csv", fileEncoding = 'UTF-8-BOM')
head(exnoise)
head(milns)
head(dynamic)
m <- ggplot(milns, aes(x=factor(Policy), y=Roughness, fill=factor(Policy))) +
geom_boxplot() +
xlab("Discretisation\nPolicy") +
ylab(expression(rho)) +
labs(fill = "Data Set")+
theme(legend.position = "none")+
scale_fill_manual(values = c("#4E84C4", "#D16103"))+
theme(axis.text=element_text(size=12))
m
n <- ggplot(exnoise, aes(x=factor(Noise.Factor), y=Roughness, fill=factor(id))) +
geom_boxplot() +
xlab(expression(sigma)) +
ylab(expression(rho)) +
labs(fill = "Data Set")+
theme(legend.position = "none")+
scale_fill_manual(values = c("#F8766D", "#00BFC4", "#00BA38"))
n
d <- ggplot(dynamic, aes(x=factor(id), y=Roughness, fill=factor(id))) +
geom_boxplot() +
xlab("Dataset Type") +
ylab(expression(rho)) +
labs(fill = "Data Set")+
theme(legend.position = "none")+
scale_fill_manual(values = c("#F8766D", "#00BFC4", "#00BA38"))+
theme(axis.text=element_text(size=12))
d
legend <- get_legend(n)
legend <- as_ggplot(legend)
legend
fig <- ggarrange(n, d, m, labels = c("A", "B", "C"), nrow=3, ncol=1,
common.legend = TRUE,
legend = "bottom")
fig
annotate_figure(fig,
top = text_grob("Effect of Noise and Extinction on Roughness", face="bold", size=14))
annotate_figure(fig,
top = text_grob(expression(paste("Effect of Noise and Extinction on ", rho )), face="bold", size=14))
fig <- ggarrange(n, m, d, labels = c("A", "B", "C"), nrow=3, ncol=1,
common.legend = TRUE,
legend = "bottom")
fig
annotate_figure(fig,
top = text_grob(expression(paste("Effect of Noise and Extinction on ", rho )), face="bold", size=14))
library(ggplot2)
library(ggpubr)
setwd("~/GitHub/BL4201-SH-Project/TestDirectory/R")
data1 <- read.csv("q3_score_mean_perturbed_extinction_networks.csv")
head(data1)
data2 <- read.csv("q3_score_mean_non_perturbed_extinction_networks.csv")
head(data2)
# Now combine the two datasets
data <- rbind(data1, data2)
# Now load in the P metric Data
con <- read.csv("roughness_extinction_total.csv")
ran <- read.csv("perturbedextinctionroughness_total.csv")
rough <- rbind(con, ran)
head(rough)
# Now subset
not_noise <- subset(data, data$id != "Random Noise")
noise <- subset(data, data$id == "Random Noise")
cons <- subset(not_noise, not_noise$initial_state == "constant")
rand <- subset(not_noise, not_noise$initial_state == "random")
rough_no_neg <- subset(rough, rough$id != "Random Noise")
random <- subset(rough_no_neg, rough_no_neg$initial_state == "random")
constant <- subset(rough_no_neg, rough_no_neg$initial_state == "constant")
# Get wilcox test statistic between the two types of initial state
wilcox.test(score ~ initial_state, data=not_noise)
wilcox.test(score ~ id, data=cons)
wilcox.test(score ~ id, data=rand)
wilcox.test(Roughness ~ id, data=random)
wilcox.test(Roughness ~ id, data=constant)
# Now create plot objects
not_noise$initial_state <- factor(not_noise$initial_state, levels=c("constant", "random"))
p <- ggplot(not_noise, aes(x=factor(initial_state), y=score, fill=factor(id))) +
geom_boxplot() +
xlab("Simulation Initial State") +
ylab("d") +
labs(fill = "")
p
n <- ggplot(noise, aes(x=factor(id), y=score, fill=factor(id))) +
geom_boxplot() +
xlab("") +
ylab("d") +
labs(fill = "")+
theme(legend.position = "none")
n
r <- ggplot(rough_no_neg, aes(x=factor(initial_state), y=Roughness, fill=factor(id)))+
geom_boxplot()+
xlab("Simulation Initial State")+
ylab("P")+
labs(fill = "")
r
a <- ggplot(random, aes(x=factor(id), y=Roughness, fill=factor(id)))+
geom_boxplot()+
xlab("")+
ylab("P")+
labs(fill = "")
a
# Now we arrange
fig <- ggarrange(n, a, r,p , labels = c("A", "B", "C", "D"),
common.legend = TRUE,
ncol=2, nrow =2,
legend = "bottom")
annotate_figure(fig,
top = text_grob("Effect of Initial Simulation State on P", face="bold", size=14))
# Also wish to test if there is a difference in P between extinction and no extinction with random initial state
library(ggplot2)
library(ggpubr)
setwd("~/GitHub/BL4201-SH-Project/TestDirectory/R")
data1 <- read.csv("q3_score_mean_perturbed_extinction_networks.csv")
head(data1)
data2 <- read.csv("q3_score_mean_non_perturbed_extinction_networks.csv")
head(data2)
# Now combine the two datasets
data <- rbind(data1, data2)
# Now load in the P metric Data
con <- read.csv("roughness_extinction_total.csv")
ran <- read.csv("perturbedextinctionroughness_total.csv")
rough <- rbind(con, ran)
head(rough)
# Now subset
not_noise <- subset(data, data$id != "Random Noise")
noise <- subset(data, data$id == "Random Noise")
cons <- subset(not_noise, not_noise$initial_state == "constant")
rand <- subset(not_noise, not_noise$initial_state == "random")
rough_no_neg <- subset(rough, rough$id != "Random Noise")
random <- subset(rough_no_neg, rough_no_neg$initial_state == "random")
constant <- subset(rough_no_neg, rough_no_neg$initial_state == "constant")
# Get wilcox test statistic between the two types of initial state
wilcox.test(score ~ initial_state, data=not_noise)
wilcox.test(score ~ id, data=cons)
wilcox.test(score ~ id, data=rand)
wilcox.test(Roughness ~ id, data=random)
wilcox.test(Roughness ~ id, data=constant)
# Now create plot objects
not_noise$initial_state <- factor(not_noise$initial_state, levels=c("constant", "random"))
p <- ggplot(not_noise, aes(x=factor(initial_state), y=score, fill=factor(id))) +
geom_boxplot() +
xlab("Simulation Initial State") +
ylab("d") +
labs(fill = "")
p
n <- ggplot(noise, aes(x=factor(id), y=score, fill=factor(id))) +
geom_boxplot() +
xlab("") +
ylab("d") +
labs(fill = "")+
theme(legend.position = "none")
n
r <- ggplot(rough_no_neg, aes(x=factor(initial_state), y=Roughness, fill=factor(id)))+
geom_boxplot()+
xlab("Simulation Initial State")+
ylab("P")+
labs(fill = "")
r
a <- ggplot(random, aes(x=factor(id), y=Roughness, fill=factor(id)))+
geom_boxplot()+
xlab("")+
ylab("P")+
labs(fill = "")
a
# Now we arrange
fig <- ggarrange(n, a, r,p , labels = c("A", "B", "C", "D"),
common.legend = TRUE,
ncol=2, nrow =2,
legend = "bottom")
annotate_figure(fig,
top = text_grob("Effect of Initial Simulation State on P", face="bold", size=14))
# Also wish to test if there is a difference in P between extinction and no extinction with random initial state
library(ggplot2)
library(ggpubr)
setwd("~/GitHub/BL4201-SH-Project/TestDirectory/R")
data <- read.csv("cyclicroughness_total.csv")
head(data)
# Now subset
linkage <- subset(data, data$id == "cyclic ")
cyclic <- subset(data, data$Links == 15)
# Now create two plot objects
wilcox.test(Roughness ~ id, data=cyclic)
kruskal.test(Roughness ~ id, data=cyclic)
c <- ggplot(cyclic, aes(x=factor(id), y=Roughness, fill=factor(id))) +
geom_boxplot() +
xlab("Network Structure") +
ylab("P") +
labs(fill = "Data Set")+
theme(legend.position = "none")+
scale_fill_brewer(palette="Dark2")
c
l <- ggplot(linkage, aes(x=factor(Links), y=Roughness, fill=factor(Links))) +
geom_boxplot() +
xlab("Number of Network Edges") +
ylab("P") +
labs(fill = "Data Set")+
theme(legend.position = "none")+
scale_fill_brewer(palette="Accent")
# Now arrange as one figure
fig <- ggarrange(c, l, labels = c("A", "B"),
common.legend = FALSE,
ncol=2, nrow =1,
legend = "none")
annotate_figure(fig,
top = text_grob("Effect of Network Structure on P", face="bold", size=14))
annotate_figure(fig,
top = text_grob(expression(paste("Effect of Network Structure on ", rho)), face="bold", size=14))
l <- ggplot(linkage, aes(x=factor(Links), y=Roughness, fill=factor(Links))) +
geom_boxplot() +
xlab("Number of Network Edges") +
ylab(expression(rho)) +
labs(fill = "Data Set")+
theme(legend.position = "none")+
scale_fill_brewer(palette="Accent")
c <- ggplot(cyclic, aes(x=factor(id), y=Roughness, fill=factor(id))) +
geom_boxplot() +
xlab("Network Structure") +
ylab(expression(rho)) +
labs(fill = "Data Set")+
theme(legend.position = "none")+
scale_fill_brewer(palette="Dark2")
fig <- ggarrange(c, l, labels = c("A", "B"),
common.legend = FALSE,
ncol=2, nrow =1,
legend = "none")
annotate_figure(fig,
top = text_grob(expression(paste("Effect of Network Structure on ", rho)), face="bold", size=14))
head(data1)
head(data2)
data <- rbind(data1, data2)
con <- read.csv("roughness_extinction_total.csv")
ran <- read.csv("perturbedextinctionroughness_total.csv")
rough <- rbind(con, ran)
head(rough)
not_noise <- subset(data, data$id != "Random Noise")
noise <- subset(data, data$id == "Random Noise")
cons <- subset(not_noise, not_noise$initial_state == "constant")
rand <- subset(not_noise, not_noise$initial_state == "random")
rough_no_neg <- subset(rough, rough$id != "Random Noise")
random <- subset(rough_no_neg, rough_no_neg$initial_state == "random")
constant <- subset(rough_no_neg, rough_no_neg$initial_state == "constant")
p <- ggplot(not_noise, aes(x=factor(initial_state), y=score, fill=factor(id))) +
geom_boxplot() +
xlab("Simulation Initial State") +
ylab("d") +
labs(fill = "")
p
head(rough)
r <- ggplot(rough_no_neg, aes(x=factor(initial_state), y=Roughness, fill=factor(id)))+
geom_boxplot()+
xlab("Simulation Initial State")+
ylab("P")+
labs(fill = "")
r
fig <- ggarrange(r,p , labels = c("A", "B"),
common.legend = TRUE,
ncol=2, nrow =1,
legend = "bottom")
annotate_figure(fig,
top = text_grob("Effect of Initial Simulation State on P", face="bold", size=14))
annotate_figure(fig,
top = text_grob(expression(paste("Effect of Initial Simulation State on ",rho)), face="bold", size=14))
r <- ggplot(rough_no_neg, aes(x=factor(initial_state), y=Roughness, fill=factor(id)))+
geom_boxplot()+
xlab("Simulation Initial State")+
ylab(expression(rho))+
labs(fill = "")
r
fig <- ggarrange(r,p , labels = c("A", "B"),
common.legend = TRUE,
ncol=2, nrow =1,
legend = "bottom")
annotate_figure(fig,
top = text_grob(expression(paste("Effect of Initial Simulation State on ",rho)), face="bold", size=14))
p <- ggplot(not_noise, aes(x=initial_state, y=score, fill=factor(id))) +
geom_boxplot() +
xlab("Simulation Initial State") +
ylab("d") +
labs(fill = "")
p
library(forcats)
p <- ggplot(not_noise, aes(x=initial_state, y=score, fill=factor(id))) +
geom_boxplot() +
xlab("Simulation Initial State") +
ylab("d") +
labs(fill = "")+
aes(x = fct_inorder(initial_state))
p
p <- ggplot(not_noise, aes(x=initial_state, y=score, fill=factor(id))) +
geom_boxplot() +
xlab("Simulation Initial State") +
ylab("d") +
labs(fill = "")+
aes(x = fct_inorder(not_noise$initial_state))
p
write.csv(data, "reordered.csv")
data <- read.csv("reordered.csv")
p <- ggplot(not_noise, aes(x=initial_state, y=score, fill=factor(id))) +
geom_boxplot() +
xlab("Simulation Initial State") +
ylab("d") +
labs(fill = "")
p
not_noise <- subset(data, data$id != "Random Noise")
p <- ggplot(not_noise, aes(x=initial_state, y=score, fill=factor(id))) +
geom_boxplot() +
xlab("Simulation Initial State") +
ylab("d") +
labs(fill = "")
# scale_x_discrete(limits= not_$p.name)
p
fig <- ggarrange(r,p , labels = c("A", "B"),
common.legend = TRUE,
ncol=2, nrow =1,
legend = "bottom")
annotate_figure(fig,
top = text_grob(expression(paste("Effect of Initial Simulation State on ",rho)), face="bold", size=14))
library(ggplot2)
library(ggpubr)
setwd("~/GitHub/BL4201-SH-Project/TestDirectory/R")
data <- read.csv("bipartiteroughness_total.csv")
head(data)
dynamic <- read.csv("generegdynamicroughness_total.csv")
head(dynamic)
# Now subset
without_half_network <- subset(data, data$id != "Half Observed")
wilcox.test(Roughness ~ id, data=dynamic)
kruskal.test(Roughness ~ id, data=dynamic)
# now create plot objects
p <- ggplot(data, aes(x=factor(id), y=Roughness, fill=factor(id)))+
geom_boxplot()+
xlab("") +
ylab("P") +
labs(fill = "")+
theme(legend.position = "none")
p
d <- ggplot(dynamic, aes(x=factor(id), y=Roughness, fill=factor(id)))+
geom_boxplot()+
xlab("Nodes Observed") +
ylab("P") +
labs(fill = "")+
theme(legend.position = "none")+
scale_fill_manual(values = c("#F8766D", "#00BA38"))
d
fig <- ggarrange(p, d , labels = c("A", "B"),
common.legend = FALSE,
ncol=1, nrow =2,
legend = "none")
annotate_figure(fig,
top = text_grob("Effect of Node Silencing on P", face="bold", size=14))
p <- ggplot(data, aes(x=factor(id), y=Roughness, fill=factor(id)))+
geom_boxplot()+
xlab("") +
ylab(expression(rho)) +
labs(fill = "")+
theme(legend.position = "none")
p
p <- ggplot(data, aes(x=factor(id), y=Roughness, fill=factor(id)))+
geom_boxplot()+
xlab("") +
ylab(expression(rho)) +
labs(fill = "")+
theme(legend.position = "none")
fig <- ggarrange(p, d , labels = c("A", "B"),
common.legend = FALSE,
ncol=1, nrow =2,
legend = "none")
fig <- ggarrange(p, d , labels = c("A", "B"),
common.legend = FALSE,
ncol=1, nrow =2,
legend = "none")
d <- ggplot(dynamic, aes(x=factor(id), y=Roughness, fill=factor(id)))+
geom_boxplot()+
xlab("Nodes Observed") +
ylab("P") +
labs(fill = "")+
theme(legend.position = "none")+
scale_fill_manual(values = c("#F8766D", "#00BA38"))
d
fig <- ggarrange(p, d , labels = c("A", "B"),
common.legend = FALSE,
ncol=1, nrow =2,
legend = "none")
annotate_figure(fig,
top = text_grob("Effect of Node Silencing on P", face="bold", size=14))
data <- read.csv("bipartiteroughness_total.csv")
head(data)
p <- ggplot(data, aes(x=factor(id), y=Roughness, fill=factor(id)))+
geom_boxplot()+
xlab("") +
ylab(expression(rho)) +
labs(fill = "")+
theme(legend.position = "none")
p
p <- ggplot(data, aes(x=id, y=Roughness, fill=factor(id)))+
geom_boxplot()+
xlab("") +
ylab(expression(rho)) +
labs(fill = "")+
theme(legend.position = "none")
p
# now create plot objects
levels(data$id)
data$id <- factor(data$id,levels=c("One Layer","Two Layers","Half Network"))
p <- ggplot(data, aes(x=id, y=Roughness, fill=factor(id)))+
geom_boxplot()+
xlab("") +
ylab(expression(rho)) +
labs(fill = "")+
theme(legend.position = "none")
p
fig <- ggarrange(p, d , labels = c("A", "B"),
common.legend = FALSE,
ncol=1, nrow =2,
legend = "none")
annotate_figure(fig,
top = text_grob("Effect of Node Silencing on P", face="bold", size=14))
d <- ggplot(dynamic, aes(x=factor(id), y=Roughness, fill=factor(id)))+
geom_boxplot()+
xlab("Nodes Observed") +
ylab(expression(rho)) +
labs(fill = "")+
theme(legend.position = "none")+
scale_fill_manual(values = c("#F8766D", "#00BA38"))
d
fig <- ggarrange(p, d , labels = c("A", "B"),
common.legend = FALSE,
ncol=1, nrow =2,
legend = "none")
annotate_figure(fig,
top = text_grob("Effect of Node Silencing on P", face="bold", size=14))
annotate_figure(fig,
top = text_grob(expression(paste("Effect of Node Silencing on ",rho)), face="bold", size=14))
